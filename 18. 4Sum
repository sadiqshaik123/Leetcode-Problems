//C++

class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        int n = nums.size();
        sort(nums.begin(), nums.end());
        kSum(nums, target, 4, res);
        return res;
    }
    void kSum(vector<int>& nums, int target, int k, vector<vector<int>>& res) {
        vector<int> cur;
        dfs(nums, target, k, 0, (int)nums.size() - 1, cur, res);
    }
    void dfs(vector<int>& nums, long target, int k, int left, int right, vector<int>& cur, vector<vector<int>>& res) {
        if (k == 2) {
            while (left < right) {
                if (nums[left] + nums[right] == target) {
                    cur.push_back(nums[left]);
                    cur.push_back(nums[right]);
                    res.push_back(cur);
                    cur.pop_back();
                    cur.pop_back();
                    while (left < right && nums[left] == nums[left + 1]) ++left;
                    while (left < right && nums[right] == nums[right - 1]) --right;
                    ++left; --right;
                } else if (nums[left] + nums[right] < target) {
                    ++left;
                } else {
                    --right;
                }
            }
        }
        while (left < right) {
            cur.push_back(nums[left]);
            dfs(nums, target - nums[left], k - 1, left + 1, right, cur, res);
            cur.pop_back();
            while (left < right && nums[left] == nums[left + 1]) ++left;
            ++left;
        }
    }
};
