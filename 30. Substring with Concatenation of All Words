//C++

class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        if (s.empty() || words.empty()) return {};
        vector<int> res;
        int n = s.size(), cnt = words.size(), len = words[0].size();
        unordered_map<string, int> wordMap;
        for (string word : words) ++wordMap[word];
        for (int i = 0; i < len; ++i) {
            int left = i, curCnt = 0;
            unordered_map<string, int> curMap;
            for (int j = i; j <= n - len; j += len) {
                string word = s.substr(j, len);
                if (wordMap.count(word)) {
                    ++curMap[word];
                    if (curMap[word] <= wordMap[word]) {
                        ++curCnt;
                    } else {
                        while (curMap[word] > wordMap[word]) {
                            string t = s.substr(left, len);
                            --curMap[t];
                            if (curMap[t] < wordMap[t]) --curCnt;
                            left += len;
                        }
                    }
                    if (curCnt == cnt) {
                        res.push_back(left);
                        --curMap[s.substr(left, len)];
                        --curCnt;
                        left += len;
                    }
                } else {
                    curMap.clear();
                    curCnt = 0;
                    left = j + len;
                }
            }
        }
        return res;
    }
};
