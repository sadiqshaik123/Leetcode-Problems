//C++

class Solution {
public:
    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> res;
        vector<int> cur, visited(nums.size());
        dfs(nums, 0, visited, cur, res);
        return res;
    }
    void dfs(vector<int>& nums, int level, vector<int>& visited, vector<int>& cur, vector<vector<int>>& res) {
        if (level == nums.size()) {
            res.push_back(cur); 
            return;
        }
        for (int i = 0; i < nums.size(); ++i) {
            if (visited[i] == 1) continue;
            visited[i] = 1;
            cur.push_back(nums[i]);
            dfs(nums, level + 1, visited, cur, res);
            cur.pop_back();
            visited[i] = 0;
        }
    }
};
